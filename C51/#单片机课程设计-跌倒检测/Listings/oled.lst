C51 COMPILER V9.60.0.0   OLED                                                              12/11/2021 12:15:03 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE OLED
OBJECT MODULE PLACED IN .\Objects\oled.obj
COMPILER INVOKED BY: C:\Software\Keil_v5\C51\BIN\C51.EXE oled.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\List
                    -ings\oled.lst) OBJECT(.\Objects\oled.obj)

line level    source

   1          
   2          #include "oled.h"
   3          
   4          #include "oledfont.h"
   5          #include "delay.h"
   6          #include "IIC.h"
   7          
   8          //#include "delay.h"
   9          //OLED的显存
  10          //存放格式如下.
  11          //[0]0 1 2 3 ... 127
  12          //[1]0 1 2 3 ... 127
  13          //[2]0 1 2 3 ... 127
  14          //[3]0 1 2 3 ... 127
  15          //[4]0 1 2 3 ... 127
  16          //[5]0 1 2 3 ... 127
  17          //[6]0 1 2 3 ... 127
  18          //[7]0 1 2 3 ... 127
  19          
  20          void OLED_WR_Byte(unsigned dat, unsigned cmd)
  21          {
  22   1          if (cmd)
  23   1          {
  24   2      
  25   2              IIC_Write_Data(0x78, 0x40, dat);
  26   2          }
  27   1          else
  28   1          {
  29   2              IIC_Write_Data(0x78, 0x00, dat);
  30   2          }
  31   1      }
  32          
  33          void OLED_Set_Pos(uchar x, uchar y)
  34          {   OLED_WR_Byte(0xb0+y,OLED_CMD);
  35   1          OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
  36   1          OLED_WR_Byte((x&0x0f),OLED_CMD);
  37   1      }
  38          
  39          void OLED_Display_On(void)
  40          {
  41   1          OLED_WR_Byte(0X8D,OLED_CMD);
  42   1          OLED_WR_Byte(0X14,OLED_CMD);
  43   1          OLED_WR_Byte(0XAF,OLED_CMD);
  44   1      }
  45          
  46          void OLED_Display_Off(void)
  47          {
  48   1          OLED_WR_Byte(0X8D,OLED_CMD);
  49   1          OLED_WR_Byte(0X10,OLED_CMD);
  50   1          OLED_WR_Byte(0XAE,OLED_CMD);
  51   1      }
  52          
  53          void OLED_Clear(void)
  54          {
C51 COMPILER V9.60.0.0   OLED                                                              12/11/2021 12:15:03 PAGE 2   

  55   1          uchar i,n;
  56   1          for(i=0; i<8; i++)
  57   1          {
  58   2              OLED_WR_Byte (0xb0+i,OLED_CMD);
  59   2              OLED_WR_Byte (0x00,OLED_CMD);
  60   2              OLED_WR_Byte (0x10,OLED_CMD);
  61   2              for(n=0; n<128; n++)OLED_WR_Byte(0,OLED_DATA);
  62   2          }
  63   1      }
  64          void OLED_On(void)
  65          {
  66   1          uchar i,n;
  67   1          for(i=0; i<8; i++)
  68   1          {
  69   2              OLED_WR_Byte (0xb0+i,OLED_CMD); 
  70   2              OLED_WR_Byte (0x00,OLED_CMD); 
  71   2              OLED_WR_Byte (0x10,OLED_CMD);
  72   2              for(n=0; n<128; n++)OLED_WR_Byte(1,OLED_DATA);
  73   2          } 
  74   1      }
  75          
  76          void OLED_ShowChar(uchar x,uchar y,uchar chr,uchar Char_Size)
  77          {
  78   1          uchar c=0,i=0;
  79   1          c=chr-' ';
  80   1          if(x>Max_Column-1) {
  81   2              x=0;
  82   2              y=y+2;
  83   2          }
  84   1          if(Char_Size ==16)
  85   1          {
  86   2              OLED_Set_Pos(x,y);
  87   2              for(i=0; i<8; i++)
  88   2                  OLED_WR_Byte(F8X16[c*16+i],OLED_DATA);
  89   2              OLED_Set_Pos(x,y+1);
  90   2              for(i=0; i<8; i++)
  91   2                  OLED_WR_Byte(F8X16[c*16+i+8],OLED_DATA);
  92   2          }
  93   1          else {
  94   2              OLED_Set_Pos(x,y);
  95   2              for(i=0; i<6; i++)
  96   2                  OLED_WR_Byte(F6x8[c][i],OLED_DATA);
  97   2      
  98   2          }
  99   1      }
 100          
 101          uint oled_pow(uchar m,uchar n)
 102          {
 103   1          uint result=1;
 104   1          while(n--)result*=m;
 105   1          return result;
 106   1      }
 107          
 108          void OLED_ShowNum(uchar x,uchar y,uint num,uchar len,uchar size2)
 109          {
 110   1          uchar t,temp;
 111   1          uchar enshow=0;
 112   1          for(t=0; t<len; t++)
 113   1          {
 114   2              temp=(num/oled_pow(10,len-t-1))%10;
 115   2              if(enshow==0&&t<(len-1))
 116   2              {
C51 COMPILER V9.60.0.0   OLED                                                              12/11/2021 12:15:03 PAGE 3   

 117   3                  if(temp==0)
 118   3                  {
 119   4                      OLED_ShowChar(x+(size2/2)*t,y,' ',size2);
 120   4                      continue;
 121   4                  } else enshow=1;
 122   3      
 123   3              }
 124   2              OLED_ShowChar(x+(size2/2)*t,y,temp+'0',size2);
 125   2          }
 126   1      }
 127          
 128          void OLED_ShowString(uchar x,uchar y,uchar *chr,uchar Char_Size)
 129          {
 130   1          uchar j=0;
 131   1          while (chr[j]!='\0')
 132   1          {   OLED_ShowChar(x,y,chr[j],Char_Size);
 133   2              x+=8;
 134   2              if(x>120) {
 135   3                  x=0;
 136   3                  y+=2;
 137   3              }
 138   2              j++;
 139   2          }
 140   1      }
 141          
 142          void OLED_Init(void)
 143          {
 144   1      
 145   1          OLED_WR_Byte(0xAE,OLED_CMD);//--display off
 146   1          OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
 147   1          OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 148   1          OLED_WR_Byte(0x40,OLED_CMD);//--set start line address
 149   1          OLED_WR_Byte(0xB0,OLED_CMD);//--set page address
 150   1          OLED_WR_Byte(0x81,OLED_CMD); // contract control
 151   1          OLED_WR_Byte(0xFF,OLED_CMD);//--128
 152   1          OLED_WR_Byte(0xA1,OLED_CMD);//set segment remap
 153   1          OLED_WR_Byte(0xA6,OLED_CMD);//--normal / reverse
 154   1          OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 155   1          OLED_WR_Byte(0x3F,OLED_CMD);//--1/32 duty
 156   1          OLED_WR_Byte(0xC8,OLED_CMD);//Com scan direction
 157   1          OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset
 158   1          OLED_WR_Byte(0x00,OLED_CMD);//
 159   1      
 160   1          OLED_WR_Byte(0xD5,OLED_CMD);//set osc division
 161   1          OLED_WR_Byte(0x80,OLED_CMD);//
 162   1      
 163   1          OLED_WR_Byte(0xD8,OLED_CMD);//set area color mode off
 164   1          OLED_WR_Byte(0x05,OLED_CMD);//
 165   1      
 166   1          OLED_WR_Byte(0xD9,OLED_CMD);//Set Pre-Charge Period
 167   1          OLED_WR_Byte(0xF1,OLED_CMD);//
 168   1      
 169   1          OLED_WR_Byte(0xDA,OLED_CMD);//set com pin configuartion
 170   1          OLED_WR_Byte(0x12,OLED_CMD);//
 171   1      
 172   1          OLED_WR_Byte(0xDB,OLED_CMD);//set Vcomh
 173   1          OLED_WR_Byte(0x30,OLED_CMD);//
 174   1      
 175   1          OLED_WR_Byte(0x8D,OLED_CMD);//set charge pump enable
 176   1          OLED_WR_Byte(0x14,OLED_CMD);//
 177   1      
 178   1          OLED_WR_Byte(0xAF,OLED_CMD);//--turn on oled panel
C51 COMPILER V9.60.0.0   OLED                                                              12/11/2021 12:15:03 PAGE 4   

 179   1      }
 180          
 181          
 182          
 183          
 184          
 185          
 186          
 187          
 188          
 189          
 190          
 191          
 192          
 193          
 194          
 195          
 196          
 197          
 198          
 199          
 200          
 201          
 202          
 203          
 204          
 205          
 206          
 207          
 208          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    951    ----
   CONSTANT SIZE    =   2072    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      30
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
